/* eslint-disable import/first, import/no-duplicates, import/order -- we want to register an handler for uncaught exceptions / unhandled rejections as soon as possible */
import { app, dialog } from 'electron';
import { serializeError } from 'serialize-error';

function handleError(error: unknown) {
  dialog.showErrorBox(
    'Error',
    `Unexpected error occurred. Application will shut down.\n\nError:\n${json.safeStringify(
      serializeError(error),
      null,
      2,
    )}`,
  );
  app.quit();
}

process.on('uncaughtException', handleError);
process.on('unhandledRejection', handleError);

import { BrowserWindow } from 'electron';
import Store from 'electron-store';
import invariant from 'tiny-invariant';

import { config } from '#pkg/config';
import { registerListeners as registerFileDragStartListeners } from '#pkg/platform/electron/ipc/electron-main/file-drag-start';
import type { StorageState } from '#pkg/platform/persistent-storage.types';
import type { AvailableTheme } from '#pkg/ui/components-library';
import { defaultTheme, THEMES } from '#pkg/ui/components-library';
import { json } from '#pkg/base/utils/json.util';
import { platform } from '#pkg/base/platform';
import { createFileExplorerAgent } from '#pkg/platform/electron/file-explorer-agent/initialize-file-explorer-agent';
import type { WindowRef } from '#pkg/platform/electron/file-explorer-agent/window-procedures/window-procedures';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const mainWindowRef: WindowRef = { current: undefined };

// In production, allow only one instance of the app to run at any moment (https://www.electronjs.org/docs/latest/api/app#apprequestsingleinstancelock)
if (!config.isDevEnviroment) {
  const gotTheLock = app.requestSingleInstanceLock();
  if (!gotTheLock) {
    app.quit();
  }

  app.on('second-instance', () => {
    // Someone tried to run a second instance, we should focus our window.
    if (!mainWindowRef.current) {
      return;
    }

    if (mainWindowRef.current.isMinimized()) {
      mainWindowRef.current.restore();
    }
    mainWindowRef.current.focus();
  });
}

// Boot application
const store = new Store();
const activeTheme: AvailableTheme =
  (store.store as StorageState).userState?.preferences.activeTheme ?? defaultTheme;
async function bootstrap() {
  if (config.isDevEnviroment && !process.argv.includes('--noDevServer')) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires, node/no-missing-require
    await require('./electron-devtools').installExtensions();
  }

  // start agent
  const fileExplorerAgent = createFileExplorerAgent({ store, windowRef: mainWindowRef });
  fileExplorerAgent.listen();

  // register IPC handlers
  registerFileDragStartListeners();

  // create and show window
  mainWindowRef.current = createMainWindow();
  mainWindowRef.current.once('ready-to-show', () => {
    invariant(mainWindowRef.current);
    mainWindowRef.current.maximize();
    mainWindowRef.current.show();
  });
}
app.on('ready', () => {
  void bootstrap();
});

function createMainWindow(): BrowserWindow {
  // Create the browser window
  const mainWindow = new BrowserWindow({
    height: 768,
    width: 1366,
    // https://stackoverflow.com/a/62468670/1700319
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: false,
      nodeIntegration: true,
      sandbox: false,
    },
    backgroundColor: THEMES[activeTheme].background[0],
    show: false,
    titleBarStyle: platform.isWindows ? 'hidden' : undefined,
  });
  mainWindow.setMenuBarVisibility(false);

  // Load the index.html of the app.
  void mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (config.isDevEnviroment) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }

  return mainWindow;
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    mainWindowRef.current = createMainWindow();
  }
});
