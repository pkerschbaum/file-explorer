import { isWindows } from '@pkerschbaum/code-oss-file-service/out/vs/base/common/platform';
import { app, BrowserWindow } from 'electron';

import { config } from '@app/config';
import { registerListeners as registerNativeFileIconListeners } from '@app/ipc/electron-main/app';
import { registerListeners as registerFileDragStartListeners } from '@app/ipc/electron-main/file-drag-start';
import { registerListeners as registerPersistentStoreListeners } from '@app/ipc/electron-main/persistent-store';
import { registerListeners as registerShellListeners } from '@app/ipc/electron-main/shell';
import { registerListeners as registerWindowListeners } from '@app/ipc/electron-main/window';
import { ACTIVE_THEME, THEMES } from '@app/ui/theme';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createMainWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 768,
    width: 1366,
    // https://stackoverflow.com/a/62468670/1700319
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: false,
    },
    backgroundColor: THEMES[ACTIVE_THEME].background,
    show: false,
    titleBarStyle: isWindows ? 'hidden' : undefined,
  });
  mainWindow.setMenuBarVisibility(false);

  // and load the index.html of the app.
  void mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (config.isDevEnviroment) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }

  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  async function bootstrap() {
    if (config.isDevEnviroment && !process.argv.includes('--noDevServer')) {
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      await require('./electron-devtools').installExtensions();
    }

    const mainWindow = createMainWindow();

    registerFileDragStartListeners();
    registerNativeFileIconListeners();
    registerPersistentStoreListeners();
    registerShellListeners();
    registerWindowListeners(mainWindow);

    mainWindow.once('ready-to-show', () => {
      mainWindow.maximize();
      mainWindow.show();
    });
  }

  void bootstrap();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});
